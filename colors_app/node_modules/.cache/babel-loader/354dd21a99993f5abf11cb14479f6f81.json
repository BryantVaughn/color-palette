{"ast":null,"code":"var _jsxFileName = \"/Users/bryant/Desktop/React/Color-Project/colors-app/src/PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nclass PaletteMetaForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n        paletteName\n      }) => paletteName.toLowerCase() !== value.toLowerCase()));\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.showEmojiPicker = () => {\n      this.setState({\n        stage: \"emoji\"\n      });\n    };\n\n    this.savePalette = emoji => {\n      const newPalette = {\n        paletteName: this.state.newPaletteName,\n        emoji: emoji.native\n      };\n      this.props.handleSubmit(newPalette);\n    };\n\n    this.state = {\n      stage: \"form\",\n      newPaletteName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      stage,\n      newPaletteName\n    } = this.state;\n    const {\n      hideForm,\n      handleSubmit\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      open: stage === \"emoji\",\n      onClose: hideForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"Pick a Palette Emoji\"), /*#__PURE__*/React.createElement(Picker, {\n      onSelect: this.savePalette,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Dialog, {\n      open: stage === \"form\",\n      onClose: hideForm,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, \"Choose a Palette Name\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.showEmojiPicker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, \"Please enter a name for your new beautiful palette. Make sure it's unique!\"), /*#__PURE__*/React.createElement(TextValidator, {\n      label: \"Palette Name\",\n      name: \"newPaletteName\",\n      fullWidth: true,\n      margin: \"normal\",\n      value: newPaletteName,\n      onChange: this.handleChange,\n      validators: [\"required\", \"isPaletteNameUnique\"],\n      errorMessages: [\"Palette name required\", \"Name already used\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: hideForm,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, \"Save Palette\")))));\n  }\n\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/bryant/Desktop/React/Color-Project/colors-app/src/PaletteMetaForm.js"],"names":["React","Component","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","constructor","props","componentDidMount","addValidationRule","value","palettes","every","paletteName","toLowerCase","handleChange","evt","setState","target","name","handleClickOpen","open","handleClose","showEmojiPicker","stage","savePalette","emoji","newPalette","state","newPaletteName","native","handleSubmit","render","hideForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nclass PaletteMetaForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stage: \"form\",\n      newPaletteName: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n      this.props.palettes.every(\n        ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n      )\n    );\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  };\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  showEmojiPicker = () => {\n    this.setState({ stage: \"emoji\" });\n  };\n\n  savePalette = (emoji) => {\n    const newPalette = {\n      paletteName: this.state.newPaletteName,\n      emoji: emoji.native\n    };\n    this.props.handleSubmit(newPalette);\n  };\n\n  render() {\n    const { stage, newPaletteName } = this.state;\n    const { hideForm, handleSubmit } = this.props;\n\n    return (\n      <div>\n        <Dialog open={ stage === \"emoji\" } onClose={ hideForm }>\n        <DialogTitle id=\"form-dialog-title\">Pick a Palette Emoji</DialogTitle>\n          <Picker onSelect={ this.savePalette } />\n        </Dialog>\n        <Dialog\n          open={ stage === \"form\" }\n          onClose={ hideForm }\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">Choose a Palette Name</DialogTitle>\n          <ValidatorForm onSubmit={ this.showEmojiPicker }>\n            <DialogContent>\n              <DialogContentText>\n                Please enter a name for your new beautiful palette. Make sure it's unique!\n              </DialogContentText>\n              <TextValidator\n                label=\"Palette Name\"\n                name=\"newPaletteName\"\n                fullWidth\n                margin=\"normal\"\n                value={ newPaletteName }\n                onChange={ this.handleChange }\n                validators={ [\"required\", \"isPaletteNameUnique\"] }\n                errorMessages={ [\"Palette name required\", \"Name already used\"] }\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                onClick={ hideForm }\n                color=\"primary\"\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                Save Palette\n              </Button>\n            </DialogActions>\n          </ValidatorForm>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default PaletteMetaForm;"]},"metadata":{},"sourceType":"module"}