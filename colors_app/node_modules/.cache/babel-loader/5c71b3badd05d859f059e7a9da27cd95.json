{"ast":null,"code":"var _jsxFileName = \"/Users/bryant/Desktop/React/Color-Project/colors-app/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport PaletteFormNav from './PaletteFormNav';\nimport DraggableColorList from './DraggableColorList';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      paletteIsFull\n    } = this.props;\n    const {\n      currentColor\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      instantValidate: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      value: newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"color name is required\", \"color name must be unique\", \"color already used\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      disabled: paletteIsFull,\n      style: {\n        backgroundColor: paletteIsFull ? \"rgba(0,0,0,0.12)\" : currentColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n  }\n\n}\n\nexport default ColorPickerForm;","map":{"version":3,"sources":["/Users/bryant/Desktop/React/Color-Project/colors-app/src/ColorPickerForm.js"],"names":["React","Component","PaletteFormNav","DraggableColorList","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","ValidatorForm","TextValidator","ChromePicker","arrayMove","ColorPickerForm","constructor","props","updateCurrentColor","newColor","setState","currentColor","hex","state","newColorName","render","paletteIsFull","addNewColor","handleChange","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAEA,MAAMC,eAAN,SAA8Bf,SAA9B,CAAwC;AACtCgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,kBARmB,GAQGC,QAAD,IAAc;AACjC,WAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEF,QAAQ,CAACG;AAAzB,OAAd;AACD,KAVkB;;AAEjB,SAAKC,KAAL,GAAa;AACXF,MAAAA,YAAY,EAAE,MADH;AAEXG,MAAAA,YAAY,EAAE;AAFH,KAAb;AAID;;AAMDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAoB,KAAKT,KAA/B;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAmB,KAAKE,KAA9B;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AACI,MAAA,KAAK,EAAGF,YADZ;AAEI,MAAA,gBAAgB,EAAG,KAAKH,kBAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAKI,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAG,KAAKS,WAA/B;AAA6C,MAAA,eAAe,EAAG,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AACE,MAAA,KAAK,EAAGH,YADV;AAEE,MAAA,IAAI,EAAC,cAFP;AAGE,MAAA,QAAQ,EAAG,KAAKI,YAHlB;AAIE,MAAA,UAAU,EAAE,CACV,UADU,EAEV,mBAFU,EAGV,eAHU,CAJd;AASE,MAAA,aAAa,EAAE,CACb,wBADa,EAEb,2BAFa,EAGb,oBAHa,CATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAgBE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,QAAQ,EAAGF,aAJb;AAKE,MAAA,KAAK,EAAE;AACLG,QAAAA,eAAe,EAAEH,aAAa,GAC5B,kBAD4B,GAE5BL;AAHG,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWIK,aAAa,GAAG,cAAH,GAAoB,WAXrC,CAhBF,CALJ,CADF;AAsCD;;AAvDqC;;AA0DxC,eAAeX,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport PaletteFormNav from './PaletteFormNav';\nimport DraggableColorList from './DraggableColorList';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n  }\n\n  updateCurrentColor = (newColor) => {\n    this.setState({ currentColor: newColor.hex });\n  };\n\n  render() {\n    const { paletteIsFull } = this.props;\n    const { currentColor } = this.state;\n\n    return (\n      <div>\n        <ChromePicker\n            color={ currentColor }\n            onChangeComplete={ this.updateCurrentColor }\n          />\n          <ValidatorForm onSubmit={ this.addNewColor } instantValidate={ false }>\n            <TextValidator\n              value={ newColorName }\n              name=\"newColorName\"\n              onChange={ this.handleChange }\n              validators={[\n                \"required\",\n                \"isColorNameUnique\",\n                \"isColorUnique\"\n              ]}\n              errorMessages={[\n                \"color name is required\",\n                \"color name must be unique\",\n                \"color already used\"\n              ]}\n            />\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              color=\"primary\"\n              disabled={ paletteIsFull }\n              style={{\n                backgroundColor: paletteIsFull\n                ? \"rgba(0,0,0,0.12)\"\n                : currentColor\n              }}\n            >\n              { paletteIsFull ? \"Palette Full\" : \"Add Color\" }\n            </Button>\n          </ValidatorForm>\n      </div>\n    )\n  }\n}\n\nexport default ColorPickerForm;"]},"metadata":{},"sourceType":"module"}