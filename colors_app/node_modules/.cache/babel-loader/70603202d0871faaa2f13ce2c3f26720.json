{"ast":null,"code":"var _jsxFileName = \"/Users/bryant/Desktop/React/Color-Project/colors-app/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nconst styles = {\n  picker: {\n    width: \"100% !important\",\n    marginTop: \"2rem\"\n  },\n  addColor: {\n    width: \"100%\",\n    padding: \"1rem\",\n    marginTop: \"1rem\",\n    fontSize: \"2rem\"\n  },\n  colorNameInput: {\n    width: \"100%\"\n  }\n};\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.props.colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase()));\n      ValidatorForm.addValidationRule(\"isColorUnique\", value => this.props.colors.every(({\n        color\n      }) => color !== value.currentColor));\n    };\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.props.addNewColor(newColor);\n      this.setState({\n        newColorName: \"\"\n      });\n    };\n\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      paletteIsFull,\n      classes\n    } = this.props;\n    const {\n      currentColor,\n      newColorName\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      className: classes.picker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      instantValidate: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      className: classes.colorNameInput,\n      value: newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"color name is required\", \"color name must be unique\", \"color already used\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: classes.addColor,\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      disabled: paletteIsFull,\n      style: {\n        backgroundColor: paletteIsFull ? \"rgba(0,0,0,0.12)\" : currentColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n  }\n\n}\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/Users/bryant/Desktop/React/Color-Project/colors-app/src/ColorPickerForm.js"],"names":["React","Component","withStyles","Button","ValidatorForm","TextValidator","ChromePicker","styles","picker","width","marginTop","addColor","padding","fontSize","colorNameInput","ColorPickerForm","constructor","props","componentDidMount","addValidationRule","value","colors","every","name","toLowerCase","color","currentColor","updateCurrentColor","newColor","setState","hex","handleChange","evt","target","handleSubmit","state","newColorName","addNewColor","render","paletteIsFull","classes","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\n\nconst styles = {\n  picker: {\n    width: \"100% !important\",\n    marginTop: \"2rem\"\n  },\n  addColor: {\n    width: \"100%\",\n    padding: \"1rem\",\n    marginTop: \"1rem\",\n    fontSize: \"2rem\"\n  },\n  colorNameInput: {\n    width: \"100%\"\n  }\n};\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", (value) => \n      this.props.colors.every(\n        ({ name }) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule(\"isColorUnique\", (value) => \n      this.props.colors.every(\n        ({ color }) => color !== value.currentColor\n      )\n    );\n  };\n\n  updateCurrentColor = (newColor) => {\n    this.setState({ currentColor: newColor.hex });\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  };\n\n  handleSubmit = () => {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.props.addNewColor(newColor);\n    this.setState({ newColorName: \"\" });\n  };\n\n  render() {\n    const { paletteIsFull, classes } = this.props;\n    const { currentColor, newColorName } = this.state;\n\n    return (\n      <div>\n        <ChromePicker\n            color={ currentColor }\n            onChangeComplete={ this.updateCurrentColor }\n            className={ classes.picker }\n          />\n          <ValidatorForm onSubmit={ this.handleSubmit } instantValidate={ false }>\n            <TextValidator\n              className={ classes.colorNameInput }\n              value={ newColorName }\n              name=\"newColorName\"\n              onChange={ this.handleChange }\n              validators={[\n                \"required\",\n                \"isColorNameUnique\",\n                \"isColorUnique\"\n              ]}\n              errorMessages={[\n                \"color name is required\",\n                \"color name must be unique\",\n                \"color already used\"\n              ]}\n            />\n            <Button\n            className={ classes.addColor }\n              variant=\"contained\"\n              type=\"submit\"\n              color=\"primary\"\n              disabled={ paletteIsFull }\n              style={{\n                backgroundColor: paletteIsFull\n                ? \"rgba(0,0,0,0.12)\"\n                : currentColor\n              }}\n            >\n              { paletteIsFull ? \"Palette Full\" : \"Add Color\" }\n            </Button>\n          </ValidatorForm>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ColorPickerForm);"]},"metadata":{},"sourceType":"module"}