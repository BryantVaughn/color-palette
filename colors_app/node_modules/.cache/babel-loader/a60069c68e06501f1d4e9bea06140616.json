{"ast":null,"code":"var _jsxFileName = \"/Users/bryant/Desktop/React/Color-Project/colors-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport ColorPickerForm from './ColorPickerForm';\nimport PaletteFormNav from './PaletteFormNav';\nimport DraggableColorList from './DraggableColorList';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Button from '@material-ui/core/Button';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addNewColor = newColor => {\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newColorName: \"\"\n      });\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.clearColors = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.addRandomColor = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      let rand = Math.floor(Math.random() * allColors.length);\n      const randomColor = allColors[rand];\n      this.setState({\n        colors: [...this.state.colors, randomColor]\n      });\n    };\n\n    this.handleSubmit = newPalette => {\n      newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n      newPalette.colors = this.state.colors;\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    };\n\n    this.removeColor = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: false,\n      colors: this.props.palettes[0].colors,\n      newColorName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PaletteFormNav, {\n      open: open,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteIsFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, \"Random Color\"), /*#__PURE__*/React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      colors: colors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DraggableColorList, {\n      colors: colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/bryant/Desktop/React/Color-Project/colors-app/src/NewPaletteForm.js"],"names":["React","Component","ColorPickerForm","PaletteFormNav","DraggableColorList","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","CancelIcon","Button","arrayMove","styles","NewPaletteForm","constructor","props","addNewColor","newColor","setState","colors","state","newColorName","handleDrawerOpen","open","handleDrawerClose","handleChange","evt","target","name","value","clearColors","addRandomColor","allColors","palettes","map","p","flat","rand","Math","floor","random","length","randomColor","handleSubmit","newPalette","id","paletteName","toLowerCase","replace","savePalette","history","push","removeColor","colorName","filter","color","onSortEnd","oldIndex","newIndex","render","classes","maxColors","paletteIsFull","root","drawer","paper","drawerPaper","drawerHeader","container","buttons","button","content","contentShift","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ColorPickerForm from './ColorPickerForm';\nimport PaletteFormNav from './PaletteFormNav';\nimport DraggableColorList from './DraggableColorList';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Button from '@material-ui/core/Button';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\n\n\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      colors: this.props.palettes[0].colors,\n      newColorName: \"\",\n    };\n  }\n\n  addNewColor = (newColor) => {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  };\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  };\n\n  clearColors = () => {\n    this.setState({ colors: [] });\n  };\n\n  addRandomColor = () => {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({ colors: [...this.state.colors, randomColor] });\n  };\n\n  handleSubmit = (newPalette) => {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n    newPalette.colors = this.state.colors;\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  };\n\n  removeColor = colorName => {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  };\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    this.setState(({ colors }) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  };\n\n  render() {\n    const { classes, maxColors, palettes } = this.props;\n    const { open, colors } = this.state;\n    const paletteIsFull = colors.length >= maxColors\n\n    return (\n      <div className={ classes.root }>\n        <PaletteFormNav\n          open={ open }\n          palettes={ palettes }\n          handleSubmit={ this.handleSubmit }\n          handleDrawerOpen={ this.handleDrawerOpen }\n        />\n        <Drawer\n          className={ classes.drawer }\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={ open }\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={ classes.drawerHeader }>\n            <IconButton onClick={ this.handleDrawerClose }>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={ classes.container }>\n            <Typography variant=\"h4\" gutterBottom>\n              Design Your Palette\n            </Typography>\n            <div className={ classes.buttons }>\n              <Button\n                className={ classes.button }\n                variant=\"contained\"\n                color=\"secondary\" \n                onClick={ this.clearColors }\n              >\n                Clear Palette\n              </Button>\n              <Button\n                className={ classes.button }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={ this.addRandomColor }\n                disabled={ paletteIsFull }\n              >\n                Random Color\n              </Button>\n              <ColorPickerForm\n                paletteIsFull={ paletteIsFull }\n                addNewColor={ this.addNewColor }\n                colors={ colors }\n              />\n            </div>\n          </div>\n        </Drawer>\n        <main\n          className={ classNames(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={ classes.drawerHeader } />\n          <DraggableColorList\n            colors={ colors }\n            removeColor={ this.removeColor }\n            axis=\"xy\"\n            onSortEnd={ this.onSortEnd }\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}