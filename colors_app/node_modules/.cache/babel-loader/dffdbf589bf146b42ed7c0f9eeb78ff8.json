{"ast":null,"code":"var _jsxFileName = \"/Users/bryant/Desktop/React/Color-Project/colors-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport DraggableColorBox from './DraggableColorBox';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport { ChromePicker } from 'react-color';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end'\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase()));\n      ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n        color\n      }) => color !== this.state.currentColor));\n      ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n        paletteName\n      }) => paletteName.toLowerCase() !== value.toLowerCase()));\n    };\n\n    this.addNewColor = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newColorName: \"\"\n      });\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      let newName = this.state.newPaletteName;\n      const newPalette = {\n        paletteName: newName,\n        id: newName.toLowerCase().replace(/ /g, \"-\"),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    };\n\n    this.state = {\n      open: false,\n      currentColor: \"teal\",\n      colors: [{\n        color: \"blue\",\n        name: \"blue\"\n      }],\n      newColorName: \"\",\n      newPaletteName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AppBar, {\n      postion: \"fixed\",\n      color: \"default\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      disableGutters: !open,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"Open drawer\",\n      onClick: this.handleDrawerOpen,\n      className: classNames(classes.menuButton, open && classes.hide),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MenuIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"inherit\",\n      noWrap: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, \"New Color Palette\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      label: \"Palette Name\",\n      name: \"newPaletteName\",\n      value: this.state.newPaletteName,\n      onChange: this.handleChange,\n      validators: [\"required\"],\n      errorMessages: [\"Palette Name Required\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }\n    }, \"Save Palette\")))), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, \"Random Color\")), /*#__PURE__*/React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      instantValidate: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      value: this.state.newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"color name is required\", \"color name must be unique\", \"color already used\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      style: {\n        backgroundColor: this.state.currentColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, \"Add Color\"))), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }), colors.map(color => /*#__PURE__*/React.createElement(DraggableColorBox, {\n      color: color.color,\n      key: color.name,\n      name: color.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/bryant/Desktop/React/Color-Project/colors-app/src/NewPaletteForm.js"],"names":["React","Component","DraggableColorBox","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Button","ChromePicker","ValidatorForm","TextValidator","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","contentShift","NewPaletteForm","constructor","props","componentDidMount","addValidationRule","value","state","colors","every","name","toLowerCase","color","currentColor","palettes","paletteName","addNewColor","newColor","newColorName","setState","handleDrawerOpen","open","handleDrawerClose","updateCurrentColor","hex","handleChange","evt","target","handleSubmit","newName","newPaletteName","newPalette","id","replace","savePalette","history","push","render","classes","paper","backgroundColor","map","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DraggableColorBox from './DraggableColorBox';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport { ChromePicker } from 'react-color';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\n\n\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      currentColor: \"teal\",\n      colors: [{color: \"blue\", name: \"blue\"}],\n      newColorName: \"\",\n      newPaletteName: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", (value) => \n      this.state.colors.every(\n        ({ name }) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule(\"isColorUnique\", (value) => \n      this.state.colors.every(\n        ({ color }) => color !== this.state.currentColor\n      )\n    );\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n      this.props.palettes.every(({ paletteName }) => paletteName.toLowerCase() !==\n      value.toLowerCase()\n      )\n    );\n  };\n\n  addNewColor = () => {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.setState({ colors: [...this.state.colors, newColor], newColorName: \"\" });\n  };\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  updateCurrentColor = (newColor) => {\n    this.setState({ currentColor: newColor.hex });\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  };\n\n  handleSubmit = () => {\n    let newName = this.state.newPaletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { open, colors } = this.state;\n\n    return (\n      <div className={ classes.root }>\n        <CssBaseline />\n        <AppBar\n          postion=\"fixed\"\n          color=\"default\"\n          className={ classNames(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar disableGutters={ !open }>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"Open drawer\"\n              onClick={ this.handleDrawerOpen }\n              className={\n                classNames(classes.menuButton, open && classes.hide )\n              }\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              New Color Palette\n            </Typography>\n            <ValidatorForm onSubmit={ this.handleSubmit }>\n              <TextValidator\n                label=\"Palette Name\"\n                name=\"newPaletteName\"\n                value={ this.state.newPaletteName }\n                onChange={ this.handleChange }\n                validators={ [\"required\"] }\n                errorMessages={ [\"Palette Name Required\"] }\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                Save Palette\n              </Button>\n            </ValidatorForm>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={ classes.drawer }\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={ open }\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={ classes.drawerHeader }>\n            <IconButton onClick={ this.handleDrawerClose }>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <Typography variant=\"h4\">\n            Design Your Palette\n          </Typography>\n          <div>\n            <Button variant=\"contained\" color=\"secondary\">Clear Palette</Button>\n            <Button variant=\"contained\" color=\"primary\">Random Color</Button>\n          </div>\n          <ChromePicker\n            color={ this.state.currentColor }\n            onChangeComplete={ this.updateCurrentColor }\n          />\n          <ValidatorForm onSubmit={ this.addNewColor } instantValidate={ false }>\n            <TextValidator\n              value={ this.state.newColorName }\n              name=\"newColorName\"\n              onChange={ this.handleChange }\n              validators={[\n                \"required\",\n                \"isColorNameUnique\",\n                \"isColorUnique\"\n              ]}\n              errorMessages={[\n                \"color name is required\",\n                \"color name must be unique\",\n                \"color already used\"\n              ]}\n            />\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              color=\"primary\"\n              style={{ backgroundColor: this.state.currentColor }}\n            >\n              Add Color\n            </Button>\n          </ValidatorForm>\n        </Drawer>\n        <main\n          className={ classNames(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={ classes.drawerHeader } />\n          { colors.map(color => (\n            <DraggableColorBox\n              color={ color.color }\n              key={ color.name }\n              name={ color.name }\n            />\n          ))}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}