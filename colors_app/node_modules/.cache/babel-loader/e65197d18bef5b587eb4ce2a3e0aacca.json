{"ast":null,"code":"var _jsxFileName = \"/Users/bryant/Desktop/React/Color-Project/colors-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport ColorPickerForm from './ColorPickerForm';\nimport PaletteFormNav from './PaletteFormNav';\nimport DraggableColorList from './DraggableColorList';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport { arrayMove } from 'react-sortable-hoc';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end'\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  container: {\n    width: \"90%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\"\n  },\n  buttons: {}\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addNewColor = newColor => {\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newColorName: \"\"\n      });\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.clearColors = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.addRandomColor = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      let rand = Math.floor(Math.random() * allColors.length);\n      const randomColor = allColors[rand];\n      this.setState({\n        colors: [...this.state.colors, randomColor]\n      });\n    };\n\n    this.handleSubmit = newPaletteName => {\n      const newPalette = {\n        paletteName: newPaletteName,\n        id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    };\n\n    this.removeColor = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: false,\n      colors: this.props.palettes[0].colors,\n      newColorName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PaletteFormNav, {\n      open: open,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteIsFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }, \"Random Color\"), /*#__PURE__*/React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      colors: colors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DraggableColorList, {\n      colors: colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/bryant/Desktop/React/Color-Project/colors-app/src/NewPaletteForm.js"],"names":["React","Component","ColorPickerForm","PaletteFormNav","DraggableColorList","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","arrayMove","drawerWidth","styles","theme","root","display","hide","drawer","width","flexShrink","drawerPaper","alignItems","drawerHeader","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","container","flexDirection","buttons","NewPaletteForm","constructor","props","addNewColor","newColor","setState","colors","state","newColorName","handleDrawerOpen","open","handleDrawerClose","handleChange","evt","target","name","value","clearColors","addRandomColor","allColors","palettes","map","p","flat","rand","Math","floor","random","length","randomColor","handleSubmit","newPaletteName","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","removeColor","colorName","filter","color","onSortEnd","oldIndex","newIndex","render","classes","maxColors","paletteIsFull","paper","button","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ColorPickerForm from './ColorPickerForm';\nimport PaletteFormNav from './PaletteFormNav';\nimport DraggableColorList from './DraggableColorList';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport { arrayMove } from 'react-sortable-hoc';\n\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  container: {\n    width: \"90%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\"\n  },\n  buttons: {\n\n  }\n});\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      colors: this.props.palettes[0].colors,\n      newColorName: \"\",\n    };\n  }\n\n  addNewColor = (newColor) => {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  };\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  };\n\n  clearColors = () => {\n    this.setState({ colors: [] });\n  };\n\n  addRandomColor = () => {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({ colors: [...this.state.colors, randomColor] });\n  };\n\n  handleSubmit = (newPaletteName) => {\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  };\n\n  removeColor = colorName => {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  };\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    this.setState(({ colors }) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  };\n\n  render() {\n    const { classes, maxColors, palettes } = this.props;\n    const { open, colors } = this.state;\n    const paletteIsFull = colors.length >= maxColors\n\n    return (\n      <div className={ classes.root }>\n        <PaletteFormNav\n          open={ open }\n          palettes={ palettes }\n          handleSubmit={ this.handleSubmit }\n          handleDrawerOpen={ this.handleDrawerOpen }\n        />\n        <Drawer\n          className={ classes.drawer }\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={ open }\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={ classes.drawerHeader }>\n            <IconButton onClick={ this.handleDrawerClose }>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={ classes.container }>\n            <Typography variant=\"h4\">\n              Design Your Palette\n            </Typography>\n            <div className={ classes.buttons }>\n              <Button\n                className={ classes.button }\n                variant=\"contained\"\n                color=\"secondary\" \n                onClick={ this.clearColors }\n              >\n                Clear Palette\n              </Button>\n              <Button\n                className={ classes.button }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={ this.addRandomColor }\n                disabled={ paletteIsFull }\n              >\n                Random Color\n              </Button>\n              <ColorPickerForm\n                paletteIsFull={ paletteIsFull }\n                addNewColor={ this.addNewColor }\n                colors={ colors }\n              />\n            </div>\n          </div>\n        </Drawer>\n        <main\n          className={ classNames(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={ classes.drawerHeader } />\n          <DraggableColorList\n            colors={ colors }\n            removeColor={ this.removeColor }\n            axis=\"xy\"\n            onSortEnd={ this.onSortEnd }\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}